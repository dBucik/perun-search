type PerunAttribute {
    friendlyName: String!
    name: String!
    namespace: String!
    value: String
}

input InputAttribute {
    key: String!
    type: String
    value: String
}

type ExtSource {
    attributes: [PerunAttribute!]
}

type Facility {
    attributes: [PerunAttribute!]
}

type Group {
    attributes: [PerunAttribute!]
}

type Host {
    attributes: [PerunAttribute!]
}

type Member {
    attributes: [PerunAttribute!]
}

type Owner {
    attributes: [PerunAttribute!]
}


type Resource {
    attributes: [PerunAttribute!]
}

type Service {
    attributes: [PerunAttribute!]
}

type User {
    attributes: [PerunAttribute!]
}

type UserExtSource {
    attributes: [PerunAttribute!]
}

type Vo {
    attributes: [PerunAttribute!]
}

type Relation {
    primaryEntityId: Long!
    secondaryEntityId: Long!
    type: String!
    attributes: [PerunAttribute!]
}

type Query {
    # EXT_SOURCE
    getExtSources(attrsNames: [String], attributes: [InputAttribute!]!): [ExtSource]

    # FACILITY
    getFacilities(attrsNames: [String], attributes: [InputAttribute!]!): [Facility]

    # GROUP
    getGroups(attrsNames: [String], attributes: [InputAttribute!]!): [Group]

    # MEMBER
    getMembers(attrsNames: [String], attributes: [InputAttribute!]!): [Member]

    # OWNER
    getOwners(attrsNames: [String], attributes: [InputAttribute!]!): [Owner]

    # RESOURCE
    getResources(attrsNames: [String], attributes: [InputAttribute!]!): [Resource]

    # SERVICE
    getServices(attrsNames: [String], attributes: [InputAttribute!]!): [Service]

    # USER
    getUsers(attrsNames: [String], attributes: [InputAttribute!]!): [User]

    # USER_EXT_SOURCE
    getUserExtSources(attrsNames: [String], attributes: [InputAttribute!]!): [UserExtSource]

    # VO
    getVos(attrsNames: [String], attributes: [InputAttribute!]!): [Vo]

    # RELATIONS
    getRelations(type: String!, primary: Long, secondary: Long): [Relation]
    getRichRelations(type: String!, primary: Long, secondary: Long, attrsNames: [String!], attrs: [InputAttribute]): [Relation]
    getCompleteRichRelations(type: String!, primary: Long, secondary: Long, attrs: [InputAttribute]): [Relation]
}

schema {
    query: Query
}
